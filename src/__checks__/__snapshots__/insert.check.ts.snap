// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`insert check should insert and await affect count (type) should match snapshot 1`] = `"number"`;

exports[`insert check should insert and returning count (type) should match snapshot 1`] = `"number"`;

exports[`insert check should insert default column (type) should match snapshot 1`] = `
"Argument of type '{ name: string; createDate: Date; }' is not assignable to parameter of type '({ name: string | Expression<string, boolean, string> | Query<{ [key: string]: string | Expression<string, boolean, string>; }>; } & { value?: number | Expression<...> | Query<...>; }) | ({ ...; } & { ...; })[]'.
  Object literal may only specify known properties, and 'createDate' does not exist in type '({ name: string | Expression<string, boolean, string> | Query<{ [key: string]: string | Expression<string, boolean, string>; }>; } & { value?: number | Expression<...> | Query<...>; }) | ({ ...; } & { ...; })[]'."
`;

exports[`insert check should insert multiple rows and returning count (type) should match snapshot 1`] = `"number"`;

exports[`insert check should insert using subquery (type) should match snapshot 1`] = `"InsertQuery<Table<\\"foo\\", { id: Column<\\"id\\", \\"foo\\", string, true, any, undefined>; createDate: Column<\\"createDate\\", \\"foo\\", Date, true, any, undefined>; name: Column<\\"name\\", \\"foo\\", string, true, false, undefined>; value: Column<\\"value\\", \\"foo\\", number, false, false, undefined>; }>, number, { id: Column<\\"id\\", \\"foo\\", string, true, any, undefined>; createDate: Column<\\"createDate\\", \\"foo\\", Date, true, any, undefined>; name: Column<\\"name\\", \\"foo\\", string, true, false, undefined>; value: Column<\\"value\\", \\"foo\\", number, false, false, undefined>; }>"`;

exports[`insert check should insert with expression of the not-null correct type (type) should match snapshot 1`] = `"InsertQuery<Table<\\"serialTest\\", { id: Column<\\"id\\", \\"serialTest\\", number, true, true, undefined>; value: Column<\\"value\\", \\"serialTest\\", number, false, false, undefined>; }>, number, { id: Column<\\"id\\", \\"serialTest\\", number, true, true, undefined>; value: Column<\\"value\\", \\"serialTest\\", number, false, false, undefined>; }>"`;

exports[`insert check should insert with expression of the nullable correct type (type) should match snapshot 1`] = `"InsertQuery<Table<\\"serialTest\\", { id: Column<\\"id\\", \\"serialTest\\", number, true, true, undefined>; value: Column<\\"value\\", \\"serialTest\\", number, false, false, undefined>; }>, number, { id: Column<\\"id\\", \\"serialTest\\", number, true, true, undefined>; value: Column<\\"value\\", \\"serialTest\\", number, false, false, undefined>; }>"`;

exports[`insert check should insert without explicit value for column serial (type) should match snapshot 1`] = `"InsertQuery<Table<\\"serialTest\\", { id: Column<\\"id\\", \\"serialTest\\", number, true, true, undefined>; value: Column<\\"value\\", \\"serialTest\\", number, false, false, undefined>; }>, number, { id: Column<\\"id\\", \\"serialTest\\", number, true, true, undefined>; value: Column<\\"value\\", \\"serialTest\\", number, false, false, undefined>; }>"`;

exports[`insert check should insert-returning and await rows (type) should match snapshot 1`] = `"{ name: string; }[]"`;

exports[`insert check should not insert invalid type in known column (type) should match snapshot 1`] = `"Type 'number' is not assignable to type 'string | Expression<string, boolean, string> | Query<{ [key: string]: string | Expression<string, boolean, string>; }>'."`;

exports[`insert check should not insert multiple rows with invalid colums (type) should match snapshot 1`] = `
"Type '{ name: string; asd: number; }' is not assignable to type '{ name: string | Expression<string, boolean, string> | Query<{ [key: string]: string | Expression<string, boolean, string>; }>; } & { value?: number | Expression<...> | Query<...>; }'.
  Object literal may only specify known properties, and 'asd' does not exist in type '{ name: string | Expression<string, boolean, string> | Query<{ [key: string]: string | Expression<string, boolean, string>; }>; } & { value?: number | Expression<...> | Query<...>; }'."
`;

exports[`insert check should not insert unknown column (type) should match snapshot 1`] = `
"Argument of type '{ name: string; asd: string; }' is not assignable to parameter of type '({ name: string | Expression<string, boolean, string> | Query<{ [key: string]: string | Expression<string, boolean, string>; }>; } & { value?: number | Expression<...> | Query<...>; }) | ({ ...; } & { ...; })[]'.
  Object literal may only specify known properties, and 'asd' does not exist in type '({ name: string | Expression<string, boolean, string> | Query<{ [key: string]: string | Expression<string, boolean, string>; }>; } & { value?: number | Expression<...> | Query<...>; }) | ({ ...; } & { ...; })[]'."
`;

exports[`insert check should not insert with wrong type of expression (type) should match snapshot 1`] = `
"Type 'Expression<string, false, \\"?column?\\">' is not assignable to type 'number | Expression<number, boolean, string> | Query<{ [key: string]: number | Expression<number, boolean, string>; }>'.
  Type 'Expression<string, false, \\"?column?\\">' is not assignable to type 'Expression<number, boolean, string>'.
    Type 'string' is not assignable to type 'number'."
`;
