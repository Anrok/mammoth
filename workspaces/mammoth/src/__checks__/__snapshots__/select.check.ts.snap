// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`select coalesce should not convert to not null when passing another nullable value (type) should match snapshot 1`] = `"Argument of type 'Column<DefaultDbConfig, \\"value\\", \\"foo\\", \\"Int4\\", false, false, undefined>' is not assignable to parameter of type 'number | NumberExpression<DefaultDbConfig, number, boolean, any>'."`;

exports[`select float8 + int8 = float8 (type) should match snapshot 1`] = `"NumberExpression<DefaultDbConfig, \\"Float8\\", false, \\"?column?\\">"`;

exports[`select int4 + int4 = int4 (type) should match snapshot 1`] = `"NumberExpression<DefaultDbConfig, \\"Int4\\", false, \\"?column?\\">"`;

exports[`select int8 + int4 = int8 (type) should match snapshot 1`] = `"NumberExpression<DefaultDbConfig, \\"Int8\\", false, \\"?column?\\">"`;

exports[`select should convert not convert null value to not null using null in coalesce (type) should match snapshot 1`] = `"Argument of type 'Column<DefaultDbConfig, \\"value\\", \\"foo\\", \\"Int4\\", false, false, undefined>' is not assignable to parameter of type 'number | NumberExpression<DefaultDbConfig, number, boolean, any>'."`;

exports[`select should convert null value to not null using coalesce (type) should match snapshot 1`] = `
"Argument of type 'Column<DefaultDbConfig, \\"value\\", \\"foo\\", \\"Int4\\", false, false, undefined>' is not assignable to parameter of type 'number | NumberExpression<DefaultDbConfig, number, boolean, any>'.
  Type 'Column<DefaultDbConfig, \\"value\\", \\"foo\\", \\"Int4\\", false, false, undefined>' is not assignable to type 'NumberExpression<DefaultDbConfig, number, boolean, any>'.
    The types of 'plus(...).as(...).isDistinctFrom' are incompatible between these types.
      Type '(a: \\"Int4\\") => BooleanExpression<DefaultDbConfig, false, true, \\"?column?\\"> | BooleanExpression<DefaultDbConfig, true, true, \\"?column?\\">' is not assignable to type '(a: number) => BooleanExpression<DefaultDbConfig, false, true, \\"?column?\\"> | BooleanExpression<DefaultDbConfig, true, true, \\"?column?\\">'.
        Types of parameters 'a' and 'a' are incompatible.
          Type 'number' is not assignable to type '\\"Int4\\"'."
`;

exports[`select should return correct result in then (type) should match snapshot 1`] = `"{ id: string; }[]"`;

exports[`select should return null and not null properties (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; createDate: \\"Date\\"; value: Maybe<\\"Int4\\">; }"`;

exports[`select should return nullable properties of all sides because of full join (type) should match snapshot 1`] = `"{ value: Maybe<\\"Int4\\">; name: Maybe<\\"Text\\">; startDate: Maybe<\\"Date\\">; }"`;

exports[`select should return nullable properties of left joined columns (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; endDate: Maybe<\\"Date\\">; value: Maybe<\\"Int4\\">; }"`;

exports[`select should return nullable properties of left side properties when right joining (type) should match snapshot 1`] = `"{ value: Maybe<\\"Int4\\">; name: Maybe<\\"Text\\">; startDate: \\"Date\\"; }"`;

exports[`select should return nullable text when calling concat on nullable column (type) should match snapshot 1`] = `"TextExpression<DefaultDbConfig, \\"Text\\", false, \\"?column?\\">"`;

exports[`select should return nullable text when calling concat with nullable input (type) should match snapshot 1`] = `"TextExpression<DefaultDbConfig, \\"Text\\", false, \\"?column?\\">"`;

exports[`select should return previous return value in then (type) should match snapshot 1`] = `"number"`;

exports[`select should return renamed properties because of alias (type) should match snapshot 1`] = `"{ fooName: \\"Text\\"; fooValue: Maybe<\\"Int4\\">; }"`;

exports[`select should select * and return nullable properties of left side properties when right joining (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; createDate: Maybe<\\"Date\\">; name: Maybe<\\"Text\\">; value: Maybe<\\"Int4\\">; startDate: \\"Date\\"; endDate: \\"Date\\"; fooId: Maybe<Uuid<\\"..\\">>; }"`;

exports[`select should select * from foo (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; createDate: \\"Date\\"; name: \\"Text\\"; value: Maybe<\\"Int4\\">; }"`;

exports[`select should select * from foo left join bar (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; createDate: \\"Date\\"; name: \\"Text\\"; value: Maybe<\\"Int4\\">; startDate: Maybe<\\"Date\\">; endDate: Maybe<\\"Date\\">; fooId: Maybe<Uuid<\\"..\\">>; }"`;

exports[`select should select * from foo right join bar (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; createDate: Maybe<\\"Date\\">; name: Maybe<\\"Text\\">; value: Maybe<\\"Int4\\">; startDate: \\"Date\\"; endDate: \\"Date\\"; fooId: Maybe<Uuid<\\"..\\">>; }"`;

exports[`select should select aggregate subquery (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; count: \\"Int8\\" | Maybe<\\"Int8\\">; }"`;

exports[`select should select aggregate with alias (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; total: Maybe<\\"Float4\\">; } | { id: Uuid<\\"..\\">; total: Maybe<\\"Int8\\">; } | { id: Uuid<\\"..\\">; total: Maybe<\\"Float8\\">; } | { id: Uuid<\\"..\\">; total: Maybe<\\"Numeric\\">; }"`;

exports[`select should select and await result set (type) should match snapshot 1`] = `"{ id: string; value: number; }[]"`;

exports[`select should select array_agg (type) should match snapshot 1`] = `"{ arrayAgg: Maybe<string[]>; }"`;

exports[`select should select case with correct type and alias (type) should match snapshot 1`] = `"{ bar: \\"B\\" | Maybe<\\"B\\">; } | { bar: \\"A\\" | Maybe<\\"A\\">; } | { bar: \\"C\\" | Maybe<\\"C\\">; }"`;

exports[`select should select column with default which is nullable (type) should match snapshot 1`] = `"{ value: Maybe<\\"Int4\\">; }"`;

exports[`select should select expression (type) should match snapshot 1`] = `"{ \\"?column?\\": Maybe<\\"Int4\\">; }"`;

exports[`select should select foo.* and ignore the rest (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; createDate: \\"Date\\"; name: \\"Text\\"; value: Maybe<\\"Int4\\">; }"`;

exports[`select should select foo.* from foo (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; createDate: \\"Date\\"; name: \\"Text\\"; value: Maybe<\\"Int4\\">; }"`;

exports[`select should select named expression (type) should match snapshot 1`] = `"{ test: Maybe<\\"Int4\\">; }"`;

exports[`select should select null column in subquery (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; value: Maybe<\\"Int4\\">; }"`;

exports[`select should select raw expression (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; test: Maybe<number>; }"`;

exports[`select should select using get column helper (type) should match snapshot 1`] = `"{ id: Uuid<\\"..\\">; } | { createDate: \\"Date\\"; } | { value: Maybe<\\"Int4\\">; } | { name: \\"Text\\"; }"`;

exports[`should output all columns and the data type (type) should match snapshot 1`] = `"{ id: string; createDate: Date; name: string; value: number; }"`;
