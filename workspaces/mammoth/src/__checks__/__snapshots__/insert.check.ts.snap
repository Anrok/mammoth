// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`insert check should insert and await affect count (type) should match snapshot 1`] = `"number"`;

exports[`insert check should insert and returning count (type) should match snapshot 1`] = `"number"`;

exports[`insert check should insert by setting value to null (type) should match snapshot 1`] = `"InsertQuery<DefaultDbConfig, Table<DefaultDbConfig, \\"serialTest\\", { id: Column<DefaultDbConfig, \\"id\\", \\"serialTest\\", \\"Int4\\", true, true, undefined>; value: Column<DefaultDbConfig, \\"value\\", \\"serialTest\\", \\"Int4\\", false, false, undefined>; }>, number, { id: Column<DefaultDbConfig, \\"id\\", \\"serialTest\\", \\"Int4\\", true, true, undefined>; value: Column<DefaultDbConfig, \\"value\\", \\"serialTest\\", \\"Int4\\", false, false, undefined>; }>"`;

exports[`insert check should insert default column (type) should match snapshot 1`] = `"number"`;

exports[`insert check should insert multiple rows and returning count (type) should match snapshot 1`] = `"number"`;

exports[`insert check should insert using subquery (type) should match snapshot 1`] = `"InsertQuery<DefaultDbConfig, Table<DefaultDbConfig, \\"foo\\", { id: Column<DefaultDbConfig, \\"id\\", \\"foo\\", Uuid<TableDefinition<{ id: ColumnDefinition<Uuid<unknown>, true, true, true>; createDate: ColumnDefinition<\\"DateTime\\", true, true, false>; name: ColumnDefinition<\\"Text\\", true, false, false>; value: ColumnDefinition<\\"Int4\\", false, false, false>; }>>, true, true, undefined>; createDate: Column<DefaultDbConfig, \\"createDate\\", \\"foo\\", \\"DateTime\\", true, true, undefined>; name: Column<DefaultDbConfig, \\"name\\", \\"foo\\", \\"Text\\", true, false, undefined>; value: Column<DefaultDbConfig, \\"value\\", \\"foo\\", \\"Int4\\", false, false, undefined>; }>, number, { id: Column<DefaultDbConfig, \\"id\\", \\"foo\\", Uuid<TableDefinition<{ id: ColumnDefinition<Uuid<unknown>, true, true, true>; createDate: ColumnDefinition<\\"DateTime\\", true, true, false>; name: ColumnDefinition<\\"Text\\", true, false, false>; value: ColumnDefinition<\\"Int4\\", false, false, false>; }>>, true, true, undefined>; createDate: Column<DefaultDbConfig, \\"createDate\\", \\"foo\\", \\"DateTime\\", true, true, undefined>; name: Column<DefaultDbConfig, \\"name\\", \\"foo\\", \\"Text\\", true, false, undefined>; value: Column<DefaultDbConfig, \\"value\\", \\"foo\\", \\"Int4\\", false, false, undefined>; }>"`;

exports[`insert check should insert with expression of the not-null correct type (type) should match snapshot 1`] = `"InsertQuery<DefaultDbConfig, Table<DefaultDbConfig, \\"serialTest\\", { id: Column<DefaultDbConfig, \\"id\\", \\"serialTest\\", \\"Int4\\", true, true, undefined>; value: Column<DefaultDbConfig, \\"value\\", \\"serialTest\\", \\"Int4\\", false, false, undefined>; }>, number, { id: Column<DefaultDbConfig, \\"id\\", \\"serialTest\\", \\"Int4\\", true, true, undefined>; value: Column<DefaultDbConfig, \\"value\\", \\"serialTest\\", \\"Int4\\", false, false, undefined>; }>"`;

exports[`insert check should insert with expression of the nullable correct type (type) should match snapshot 1`] = `"InsertQuery<DefaultDbConfig, Table<DefaultDbConfig, \\"serialTest\\", { id: Column<DefaultDbConfig, \\"id\\", \\"serialTest\\", \\"Int4\\", true, true, undefined>; value: Column<DefaultDbConfig, \\"value\\", \\"serialTest\\", \\"Int4\\", false, false, undefined>; }>, number, { id: Column<DefaultDbConfig, \\"id\\", \\"serialTest\\", \\"Int4\\", true, true, undefined>; value: Column<DefaultDbConfig, \\"value\\", \\"serialTest\\", \\"Int4\\", false, false, undefined>; }>"`;

exports[`insert check should insert without explicit value for column serial (type) should match snapshot 1`] = `"InsertQuery<DefaultDbConfig, Table<DefaultDbConfig, \\"serialTest\\", { id: Column<DefaultDbConfig, \\"id\\", \\"serialTest\\", \\"Int4\\", true, true, undefined>; value: Column<DefaultDbConfig, \\"value\\", \\"serialTest\\", \\"Int4\\", false, false, undefined>; }>, number, { id: Column<DefaultDbConfig, \\"id\\", \\"serialTest\\", \\"Int4\\", true, true, undefined>; value: Column<DefaultDbConfig, \\"value\\", \\"serialTest\\", \\"Int4\\", false, false, undefined>; }>"`;

exports[`insert check should insert-returning and await rows (type) should match snapshot 1`] = `"{ name: string; }[]"`;

exports[`insert check should not insert with wrong type of expression (type) should match snapshot 1`] = `
"Type 'TextExpression<DefaultDbConfig, string, false, \\"?column?\\">' is not assignable to type 'number | NumberExpression<DefaultDbConfig, \\"Int4\\", boolean, string> | NumberExpression<DefaultDbConfig, number, boolean, string> | Query<...>'.
  Type 'TextExpression<DefaultDbConfig, string, false, \\"?column?\\">' is missing the following properties from type 'NumberExpression<DefaultDbConfig, number, boolean, string>': plus, minus, multiply, divide, and 3 more."
`;
